// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/wuhoops/silenda/cli/models"
)

// FindSecretsByEnvModeReader is a Reader for the FindSecretsByEnvMode structure.
type FindSecretsByEnvModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindSecretsByEnvModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindSecretsByEnvModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindSecretsByEnvModeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFindSecretsByEnvModeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /secret.findSecretsByEnvMode] findSecretsByEnvMode", response, response.Code())
	}
}

// NewFindSecretsByEnvModeOK creates a FindSecretsByEnvModeOK with default headers values
func NewFindSecretsByEnvModeOK() *FindSecretsByEnvModeOK {
	return &FindSecretsByEnvModeOK{}
}

/*
FindSecretsByEnvModeOK describes a response with status code 200, with default header values.

OK
*/
type FindSecretsByEnvModeOK struct {
	Payload *models.HandlersResponseArrayFindSecretsByEnvModeResponse
}

// IsSuccess returns true when this find secrets by env mode o k response has a 2xx status code
func (o *FindSecretsByEnvModeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find secrets by env mode o k response has a 3xx status code
func (o *FindSecretsByEnvModeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find secrets by env mode o k response has a 4xx status code
func (o *FindSecretsByEnvModeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find secrets by env mode o k response has a 5xx status code
func (o *FindSecretsByEnvModeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find secrets by env mode o k response a status code equal to that given
func (o *FindSecretsByEnvModeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find secrets by env mode o k response
func (o *FindSecretsByEnvModeOK) Code() int {
	return 200
}

func (o *FindSecretsByEnvModeOK) Error() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeOK  %+v", 200, o.Payload)
}

func (o *FindSecretsByEnvModeOK) String() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeOK  %+v", 200, o.Payload)
}

func (o *FindSecretsByEnvModeOK) GetPayload() *models.HandlersResponseArrayFindSecretsByEnvModeResponse {
	return o.Payload
}

func (o *FindSecretsByEnvModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlersResponseArrayFindSecretsByEnvModeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSecretsByEnvModeBadRequest creates a FindSecretsByEnvModeBadRequest with default headers values
func NewFindSecretsByEnvModeBadRequest() *FindSecretsByEnvModeBadRequest {
	return &FindSecretsByEnvModeBadRequest{}
}

/*
FindSecretsByEnvModeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FindSecretsByEnvModeBadRequest struct {
	Payload *models.HandlersErrResponse
}

// IsSuccess returns true when this find secrets by env mode bad request response has a 2xx status code
func (o *FindSecretsByEnvModeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find secrets by env mode bad request response has a 3xx status code
func (o *FindSecretsByEnvModeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find secrets by env mode bad request response has a 4xx status code
func (o *FindSecretsByEnvModeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this find secrets by env mode bad request response has a 5xx status code
func (o *FindSecretsByEnvModeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this find secrets by env mode bad request response a status code equal to that given
func (o *FindSecretsByEnvModeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the find secrets by env mode bad request response
func (o *FindSecretsByEnvModeBadRequest) Code() int {
	return 400
}

func (o *FindSecretsByEnvModeBadRequest) Error() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeBadRequest  %+v", 400, o.Payload)
}

func (o *FindSecretsByEnvModeBadRequest) String() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeBadRequest  %+v", 400, o.Payload)
}

func (o *FindSecretsByEnvModeBadRequest) GetPayload() *models.HandlersErrResponse {
	return o.Payload
}

func (o *FindSecretsByEnvModeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlersErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSecretsByEnvModeInternalServerError creates a FindSecretsByEnvModeInternalServerError with default headers values
func NewFindSecretsByEnvModeInternalServerError() *FindSecretsByEnvModeInternalServerError {
	return &FindSecretsByEnvModeInternalServerError{}
}

/*
FindSecretsByEnvModeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type FindSecretsByEnvModeInternalServerError struct {
	Payload *models.HandlersErrResponse
}

// IsSuccess returns true when this find secrets by env mode internal server error response has a 2xx status code
func (o *FindSecretsByEnvModeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find secrets by env mode internal server error response has a 3xx status code
func (o *FindSecretsByEnvModeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find secrets by env mode internal server error response has a 4xx status code
func (o *FindSecretsByEnvModeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this find secrets by env mode internal server error response has a 5xx status code
func (o *FindSecretsByEnvModeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this find secrets by env mode internal server error response a status code equal to that given
func (o *FindSecretsByEnvModeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the find secrets by env mode internal server error response
func (o *FindSecretsByEnvModeInternalServerError) Code() int {
	return 500
}

func (o *FindSecretsByEnvModeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeInternalServerError  %+v", 500, o.Payload)
}

func (o *FindSecretsByEnvModeInternalServerError) String() string {
	return fmt.Sprintf("[POST /secret.findSecretsByEnvMode][%d] findSecretsByEnvModeInternalServerError  %+v", 500, o.Payload)
}

func (o *FindSecretsByEnvModeInternalServerError) GetPayload() *models.HandlersErrResponse {
	return o.Payload
}

func (o *FindSecretsByEnvModeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlersErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
