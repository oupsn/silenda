// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FindAllSecretsByWorkspaceIDResponse find all secrets by workspace Id response
//
// swagger:model FindAllSecretsByWorkspaceIdResponse
type FindAllSecretsByWorkspaceIDResponse struct {

	// dev
	Dev []*FindSecretsByEnvModeResponse `json:"dev"`

	// prod
	Prod []*FindSecretsByEnvModeResponse `json:"prod"`

	// stage
	Stage []*FindSecretsByEnvModeResponse `json:"stage"`
}

// Validate validates this find all secrets by workspace Id response
func (m *FindAllSecretsByWorkspaceIDResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) validateDev(formats strfmt.Registry) error {
	if swag.IsZero(m.Dev) { // not required
		return nil
	}

	for i := 0; i < len(m.Dev); i++ {
		if swag.IsZero(m.Dev[i]) { // not required
			continue
		}

		if m.Dev[i] != nil {
			if err := m.Dev[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dev" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dev" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) validateProd(formats strfmt.Registry) error {
	if swag.IsZero(m.Prod) { // not required
		return nil
	}

	for i := 0; i < len(m.Prod); i++ {
		if swag.IsZero(m.Prod[i]) { // not required
			continue
		}

		if m.Prod[i] != nil {
			if err := m.Prod[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prod" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prod" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	for i := 0; i < len(m.Stage); i++ {
		if swag.IsZero(m.Stage[i]) { // not required
			continue
		}

		if m.Stage[i] != nil {
			if err := m.Stage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this find all secrets by workspace Id response based on the context it is used
func (m *FindAllSecretsByWorkspaceIDResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDev(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) contextValidateDev(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dev); i++ {

		if m.Dev[i] != nil {

			if swag.IsZero(m.Dev[i]) { // not required
				return nil
			}

			if err := m.Dev[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dev" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dev" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) contextValidateProd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Prod); i++ {

		if m.Prod[i] != nil {

			if swag.IsZero(m.Prod[i]) { // not required
				return nil
			}

			if err := m.Prod[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prod" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prod" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FindAllSecretsByWorkspaceIDResponse) contextValidateStage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stage); i++ {

		if m.Stage[i] != nil {

			if swag.IsZero(m.Stage[i]) { // not required
				return nil
			}

			if err := m.Stage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FindAllSecretsByWorkspaceIDResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FindAllSecretsByWorkspaceIDResponse) UnmarshalBinary(b []byte) error {
	var res FindAllSecretsByWorkspaceIDResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
